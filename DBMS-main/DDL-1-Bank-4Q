https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.scaler.com%2Ftopics%2Fer-diagram-for-bank-database%2F&psig=AOvVaw3_-f5Ix9NM88yKL2rL0jo1&ust=1747866847519000&source=images&cd=vfe&opi=89978449&ved=0CBQQjRxqFwoTCICE48WNs40DFQAAAAAdAAAAABAo
https://www.scaler.com/topics/images/er-diagram-for-bank-database.webp
CREATE TABLE Branch (
    branch_id INT PRIMARY KEY,
    banker_name VARCHAR(100),
    assets DECIMAL(15,2),
    branch_address VARCHAR(255)
);

CREATE TABLE Banker (
    banker_id INT PRIMARY KEY,
    banker_name VARCHAR(100),
    branch_id INT,
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id)
);

CREATE TABLE Customer (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    dob DATE,
    mobileno VARCHAR(15)
);

CREATE TABLE Account (
    account_id INT PRIMARY KEY,
    account_balance DECIMAL(15,2),
    account_type VARCHAR(50),
    branch_id INT,
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id)
);

CREATE TABLE Customer_Account (
    customer_id INT,
    account_id INT,
    PRIMARY KEY (customer_id, account_id),
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    FOREIGN KEY (account_id) REFERENCES Account(account_id)
);


CREATE TABLE Loan (
    loan_id INT PRIMARY KEY,
    branch_id INT,
    account_id INT,
    issued_amount DECIMAL(15,2),
    remaining_amount DECIMAL(15,2),
    FOREIGN KEY (branch_id) REFERENCES Branch(branch_id),
    FOREIGN KEY (account_id) REFERENCES Account(account_id)
);

CREATE TABLE Loan_Payment (
    loan_payment_id INT PRIMARY KEY,
    loan_id INT,
    amount DECIMAL(15,2),
    FOREIGN KEY (loan_id) REFERENCES Loan(loan_id)
);

CREATE TABLE Credit_Card (
    credit_card_id INT PRIMARY KEY,
    customer_id INT,
    account_id INT,
    expiry_date DATE,
    card_limit DECIMAL(12,2),
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    FOREIGN KEY (account_id) REFERENCES Account(account_id)
);





-- Create Views on Two Tables Using JOIN Conditions
-- View 1: Customer with Account Details

CREATE VIEW CustomerAccountView AS
SELECT 
    c.customer_id,
    c.customer_name,
    c.dob,
    c.mobileno,
    a.account_id,
    a.account_type,
    a.account_balance,
    a.branch_id
FROM 
    Customer c
JOIN 
    Customer_Account ca ON c.customer_id = ca.customer_id
JOIN 
    Account a ON ca.account_id = a.account_id;
    
-- üìå View 2: Loan Details with Branch Info
CREATE VIEW LoanBranchView AS
SELECT 
    l.loan_id,
    l.account_id,
    l.issued_amount,
    l.remaining_amount,
    b.branch_id,
    b.branch_address,
    b.assets
FROM 
    Loan l
JOIN 
    Branch b ON l.branch_id = b.bran
Here is the detailed academic-style analysis of your SQL-based banking database schema and view creation:

---

## üìö **1. Theory (Detailed)**

### üí† **Entity-Relationship Modeling**

The provided schema is derived from a well-structured ER (Entity-Relationship) diagram for a bank management system. It is designed to represent various entities (e.g., `Customer`, `Banker`, `Account`, `Loan`, etc.) and the relationships between them.

### üóÉÔ∏è **Tables and Relationships**

* **`Branch`**: Central unit where banking operations are conducted. Identified uniquely by `branch_id`.
* **`Banker`**: Employees associated with branches. One-to-many relationship from `Branch` to `Banker`.
* **`Customer`**: Individuals holding bank accounts, loans, or credit cards.
* **`Account`**: Financial repository held by a customer at a specific branch.
* **`Customer_Account`**: Associative table representing the many-to-many relationship between `Customer` and `Account`.
* **`Loan`**: Loan details tied to an account and a branch.
* **`Loan_Payment`**: Transaction history of loan repayments.
* **`Credit_Card`**: Credit cards issued to customers, linked to both customer and account.

### üß© **Key Concepts Used**

* **Primary Keys (`PRIMARY KEY`)**: Uniquely identify each record (e.g., `customer_id`, `loan_id`, etc.).
* **Foreign Keys (`FOREIGN KEY`)**: Enforce referential integrity by ensuring values in one table reference valid values in another.
* **Joins (`JOIN`)**: Combine rows from two or more tables based on related columns.
* **Views (`CREATE VIEW`)**: Logical representations of a query result used to abstract complex joins or calculations.

### ‚úÖ **Best Practices & Constraints**

* Use of **foreign keys** helps maintain consistency across related tables.
* **Normalization** is applied: data is broken into smaller tables to eliminate redundancy.
* **Composite Primary Key** in `Customer_Account` ensures uniqueness of customer-account pairings.
* **Views** help in abstracting business logic for reporting and data access without exposing raw tables.

---

## ‚úÖ **2. Why Our Solution Satisfies the Problem**

### üîí **Data Integrity**

* All **foreign keys** ensure valid references (e.g., a loan must refer to an existing account and branch).
* **Composite primary key** in `Customer_Account` avoids duplicate linkages.

### üìä **Efficient Querying and Logical Structure**

* Creating **views** like `CustomerAccountView` and `LoanBranchView` allows easy and efficient access to customer-account and loan-branch relationships.
* These views help in presenting relevant information without the need for complex queries repeatedly.

### ‚öôÔ∏è **Scalability and Maintainability**

* Well-normalized schema can scale as the number of customers, accounts, and loans increases.
* Use of `DECIMAL` ensures accurate financial calculations, a critical requirement in banking.

### üß™ **Validation and Constraint Management**

* Use of `NOT NULL`, `FOREIGN KEY`, and `PRIMARY KEY` constraints validates data before insertion.
* Ensures **referential integrity**, so no orphan records exist (e.g., no loan without a branch).

---

## üîç **3. Code Working Explanation**

### üèóÔ∏è **Schema Creation**

* **`Branch` Table**: Holds data for bank branches, including name, assets, and address.
* **`Banker` Table**: Linked to `Branch` using `branch_id` (foreign key).
* **`Customer` Table**: Personal details of customers.
* **`Account` Table**: Stores account type, balance, and links to the branch.
* **`Customer_Account`**: Many-to-many mapping between customers and accounts using composite primary key.
* **`Loan` Table**: Captures loan details; associated with a branch and an account.
* **`Loan_Payment`**: Tracks payments made toward loans.
* **`Credit_Card` Table**: Records credit card information, tied to a customer and an account.

### üëÅÔ∏è **View Creation**

* **`CustomerAccountView`**:

  * Joins `Customer`, `Customer_Account`, and `Account`.
  * Shows complete account information per customer.
  * Helps in generating reports like: "Show all accounts held by each customer."

* **`LoanBranchView`**:

  * Joins `Loan` and `Branch`.
  * Shows issued and remaining amounts for each loan along with branch information.
  * Useful for tracking loans issued per branch and their financial impact.

### üí° **Assumptions**

* Customers can have multiple accounts and vice versa.
* Each loan is linked to exactly one account and branch.
* Credit card linkage assumes a customer holds a valid account.

---

Would you like this in a downloadable PDF or formatted in a document for submission? Or shall I continue with another code if you have more?
