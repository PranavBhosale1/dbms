
DML 19 - BANK 3Q Nigdi.txt
===========================

Question:
---------
Implement all SQL DML operations with operators, functions, and set operator for the following schema.
Create tables with appropriate constraints like primary key, foreign key, check constraints, not null, etc.

Schema:
-------
1. Account(Acc_no, branch_name, balance)
2. Branch(branch_name, branch_city, assets)
3. Customer(cust_name, cust_street, cust_city)
4. Depositor(cust_name, acc_no)
5. Loan(loan_no, branch_name, amount)
6. Borrower(cust_name, loan_no)

Queries to Solve:
-----------------
1. Calculate total loan amount given by the bank.
2. Delete all loans with loan amount between 1300 and 1500.
3. Delete all tuples at every branch located in Nigdi.

SQL Implementation:
--------------------

-- Step 1: Create and use database
CREATE DATABASE IF NOT EXISTS BankNigdiDB;
USE BankNigdiDB;

-- Step 2: Create tables with proper constraints

CREATE TABLE Branch (
    branch_name VARCHAR(50) PRIMARY KEY,
    branch_city VARCHAR(50) NOT NULL,
    assets DECIMAL(12,2) CHECK (assets >= 0)
);

CREATE TABLE Account (
    acc_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    balance DECIMAL(10,2) CHECK (balance >= 0),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Customer (
    cust_name VARCHAR(100) PRIMARY KEY,
    cust_street VARCHAR(100) NOT NULL,
    cust_city VARCHAR(50) NOT NULL
);

CREATE TABLE Depositor (
    cust_name VARCHAR(100),
    acc_no INT,
    PRIMARY KEY (cust_name, acc_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (acc_no) REFERENCES Account(acc_no)
);

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    amount DECIMAL(10,2) CHECK (amount > 0),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Borrower (
    cust_name VARCHAR(100),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);

-- Step 3: Insert sample data

INSERT INTO Branch VALUES
('Nigdi Branch', 'Nigdi', 4000000),
('Akurdi Branch', 'Pune', 6000000),
('Wakad Branch', 'Pune', 8000000);

INSERT INTO Account VALUES
(401, 'Nigdi Branch', 13000),
(402, 'Nigdi Branch', 15000),
(403, 'Akurdi Branch', 17000),
(404, 'Wakad Branch', 11000),
(405, 'Wakad Branch', 9500);

INSERT INTO Customer VALUES
('Pranav Bhosale', 'Sector 21', 'Nigdi'),
('Jay Rajankar', 'Gokhale Road', 'Pune'),
('Anvay Kulkarni', 'MG Road', 'Pune'),
('Krishna Gandhi', 'Station Road', 'Nigdi'),
('Gaurav Kaushalye', 'JM Road', 'Pune');

INSERT INTO Depositor VALUES
('Pranav Bhosale', 401),
('Jay Rajankar', 402),
('Anvay Kulkarni', 403),
('Krishna Gandhi', 404),
('Gaurav Kaushalye', 405);

INSERT INTO Loan VALUES
(701, 'Nigdi Branch', 1450),
(702, 'Nigdi Branch', 1700),
(703, 'Akurdi Branch', 5000),
(704, 'Wakad Branch', 7500),
(705, 'Nigdi Branch', 1350);

INSERT INTO Borrower VALUES
('Pranav Bhosale', 701),
('Jay Rajankar', 702),
('Anvay Kulkarni', 703),
('Krishna Gandhi', 704),
('Gaurav Kaushalye', 705);

-- Step 4: Query 1 - Total loan amount
SELECT SUM(amount) AS total_loan_amount FROM Loan;

-- Step 5: Query 2 - Delete loans with amount between 1300 and 1500
DELETE FROM Borrower
WHERE loan_no IN (SELECT loan_no FROM Loan WHERE amount BETWEEN 1300 AND 1500);
DELETE FROM Loan
WHERE amount BETWEEN 1300 AND 1500;

-- Step 6: Query 3 - Delete all tuples at every branch in Nigdi
DELETE FROM Depositor
WHERE acc_no IN (
    SELECT acc_no FROM Account WHERE branch_name IN (
        SELECT branch_name FROM Branch WHERE branch_city = 'Nigdi'
    )
);

DELETE FROM Borrower
WHERE loan_no IN (
    SELECT loan_no FROM Loan WHERE branch_name IN (
        SELECT branch_name FROM Branch WHERE branch_city = 'Nigdi'
    )
);

DELETE FROM Account
WHERE branch_name IN (SELECT branch_name FROM Branch WHERE branch_city = 'Nigdi');

DELETE FROM Loan
WHERE branch_name IN (SELECT branch_name FROM Branch WHERE branch_city = 'Nigdi');

DELETE FROM Branch
WHERE branch_city = 'Nigdi';



Syntax Used
Database Creation and Selection:
Syntax: CREATE DATABASE IF NOT EXISTS <database_name>; USE <database_name>;
Example:
sql

CREATE DATABASE IF NOT EXISTS BankNigdiDB;
USE BankNigdiDB;
Purpose: Creates the BankNigdiDB database if it doesn’t exist and switches to it.
Table Creation with Constraints:
Syntax: CREATE TABLE <table_name> ( <column1> <type> [constraints], ... , [FOREIGN KEY (<column>) REFERENCES <table>(<column>)] );
Example:
sql

CREATE TABLE Branch (
    branch_name VARCHAR(50) PRIMARY KEY,
    branch_city VARCHAR(50) NOT NULL,
    assets DECIMAL(12,2) CHECK (assets >= 0)
);
CREATE TABLE Account (
    acc_no INT PRIMARY KEY,
    branch_name VARCHAR(50),
    balance DECIMAL(10,2) CHECK (balance >= 0),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);
Purpose: Creates tables with:
Primary keys (branch_name, acc_no, cust_name, loan_no, composite keys for Depositor and Borrower) for uniqueness.
Foreign keys linking Account, Loan to Branch, Depositor, Borrower to Customer, Account, and Loan for referential integrity.
CHECK constraints (e.g., assets >= 0, amount > 0) to enforce data validity.
NOT NULL for required fields and DECIMAL(10,2) or DECIMAL(12,2) for precise monetary amounts.
Insert Data:
Syntax: INSERT INTO <table_name> VALUES ( <value1>, <value2>, ... ), ...;
Example:
sql

INSERT INTO Branch VALUES
('Nigdi Branch', 'Nigdi', 4000000.00),
...
Purpose: Populates tables with sample data, ensuring foreign key and check constraints are satisfied.
Queries and DML Operations:
Query 1: Total Loan Amount:
Syntax: SELECT SUM(<column>) AS <alias> FROM <table>;
Example:
sql

SELECT SUM(amount) AS total_loan_amount FROM Loan;
Purpose: Calculates the sum of all loan amounts.
Query 2: Delete Loans Between 1300 and 1500:
Syntax: DELETE FROM <table> WHERE <column> IN (SELECT <column> FROM <table> WHERE <condition>);
Example:
sql

DELETE FROM Borrower
WHERE loan_no IN (SELECT loan_no FROM Loan WHERE amount BETWEEN 1300 AND 1500);
DELETE FROM Loan
WHERE amount BETWEEN 1300 AND 1500;
Purpose: Deletes loans (and related Borrower records) with amounts between 1300 and 1500.
Query 3: Delete Tuples for Nigdi Branches:
Syntax: DELETE FROM <table> WHERE <column> IN (SELECT <column> FROM <table> WHERE <subquery>);
Example:
sql

DELETE FROM Depositor
WHERE acc_no IN (
    SELECT acc_no FROM Account WHERE branch_name IN (
        SELECT branch_name FROM Branch WHERE branch_city = 'Nigdi'
    )
);
...
Purpose: Deletes all records related to Nigdi branches from Depositor, Borrower, Account, Loan, and Branch.
Explanation of Logic
Database and Table Setup:
The BankNigdiDB database is created.
Tables are defined with primary keys, foreign keys, and check constraints to ensure data integrity.
Branch, Customer, and Account are created first to satisfy foreign key dependencies in Depositor, Loan, and Borrower.
Sample Data:
Branch: Three branches in Nigdi and Pune.
Account: Five accounts with balances at different branches.
Customer: Five customers in Nigdi and Pune.
Depositor: Links customers to accounts.
Loan: Five loans with amounts, including two in the 1300–1500 range at Nigdi.
Borrower: Links customers to loans.
Queries and DML Operations:
Query 1: Calculates the total loan amount (1450 + 1700 + 5000 + 7500 + 1350 = ₹17,000).
Query 2: Deletes loans with amounts between 1300 and 1500 (loan_no 701: ₹1450, 705: ₹1350) from Loan and their corresponding records from Borrower (for Pranav Bhosale and Gaurav Kaushalye). The Borrower deletion precedes Loan to avoid foreign key violations.
Query 3: Deletes all records related to Nigdi branches:
Depositor: Deletes records for accounts 401, 402 (Nigdi Branch).
Borrower: Deletes records for loans 701, 702, 705 (Nigdi Branch).
Account: Deletes accounts 401, 402 (Nigdi Branch).
Loan: Deletes loans 701, 702, 705 (Nigdi Branch).
Branch: Deletes Nigdi Branch.
Deletions are ordered to respect foreign key constraints (dependent tables first).
Efficiency: Primary and foreign keys ensure efficient lookups and cascading deletes. Subqueries in DELETE statements target specific records, optimized for the small dataset.
Why This Solution Satisfies the Problem
Correct Syntax: Uses standard SQL syntax for database creation, table setup with constraints, data insertion, and DML operations.
Schema Adherence: Tables (Branch, Account, Customer, Depositor, Loan, Borrower) match the specified schema with primary, foreign key, and check constraints.
Query and DML Accuracy:
Query 1 correctly sums loan amounts.
Query 2 deletes loans in the specified range, handling foreign key dependencies.
Query 3 deletes all Nigdi-related records in the correct order to avoid constraint violations.
Theory Alignment: Demonstrates DML operations (SELECT, DELETE), relational constraints, and proper dependency management in a banking context.
Complete Implementation: Includes all steps—database creation, table setup, data insertion, and query/DML execution.
Enhanced Output: Retains the original logic and data, ensuring accurate and clear results with proper constraint handling.