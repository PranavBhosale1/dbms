23 MongoDB Aggregation and Indexing.txt

Question:
Implement all aggregation operations and types of indexing with collection Employee(emp_id, emp_name, emp_dept, salary)

Theory:
Aggregation allows you to process data records and return computed results. Indexing improves the performance of queries.

Why Our Solution Satisfies the Problem:
- We create indexes to optimize queries.
- We use aggregation to compute salary stats grouped by department.

MongoDB Code:
use company;

db.Employee.insertMany([
    { emp_id: 1, emp_name: "Aarav", emp_dept: "IT", salary: 50000 },
    { emp_id: 2, emp_name: "Sneha", emp_dept: "HR", salary: 60000 },
    { emp_id: 3, emp_name: "Karan", emp_dept: "IT", salary: 55000 }
]);

-- Indexing
db.Employee.createIndex({ emp_id: 1 });
db.Employee.createIndex({ emp_dept: 1, salary: -1 });

-- Aggregation
db.Employee.aggregate([
    { $group: { _id: "$emp_dept", avgSalary: { $avg: "$salary" }, maxSalary: { $max: "$salary" } } }
]);



Syntax Used
Database Selection:
Syntax: use <database_name>
Example: use company
Purpose: Switches to the company database, creating it if it doesn’t exist when data is inserted.
Insert Documents:
Syntax: db.collection.insertMany([ { <document1> }, { <document2> }, ... ])
Example:
javascript

Copy
db.Employee.insertMany([
    { emp_id: 1, emp_name: "Aarav", emp_dept: "IT", salary: 50000, skills: ["Python", "Java"], keywords: "developer" },
    ...
])
Purpose: Inserts documents into the Employee collection, including additional fields (skills, keywords) to demonstrate multikey and text indexes.
Indexing Types:
Single-field Index:
Syntax: db.collection.createIndex({ <field>: <1 or -1> })
Example: db.Employee.createIndex({ emp_id: 1 })
Purpose: Optimizes queries filtering or sorting by emp_id.
Compound Index:
Syntax: db.collection.createIndex({ <field1>: <1 or -1>, <field2>: <1 or -1> })
Example: db.Employee.createIndex({ emp_dept: 1, salary: -1 })
Purpose: Supports queries involving emp_dept and salary (e.g., grouping by department and sorting by salary).
Multikey Index:
Syntax: db.collection.createIndex({ <array_field>: <1 or -1> })
Example: db.Employee.createIndex({ skills: 1 })
Purpose: Optimizes queries on array fields like skills.
Text Index:
Syntax: db.collection.createIndex({ <field>: "text" })
Example: db.Employee.createIndex({ keywords: "text" })
Purpose: Enables text search on keywords (e.g., db.Employee.find({ $text: { $search: "developer" } })).
Hashed Index:
Syntax: db.collection.createIndex({ <field>: "hashed" })
Example: db.Employee.createIndex({ emp_name: "hashed" })
Purpose: Optimizes equality queries on emp_name using a hash-based structure.
Aggregation Stages:
$group:
Syntax: { $group: { _id: <group_key>, <field>: { <operator>: <expression> } } }
Example:
javascript

Copy
{ $group: { _id: "$emp_dept", avgSalary: { $avg: "$salary" }, maxSalary: { $max: "$salary" }, ... } }
Purpose: Groups documents by emp_dept and computes statistics ($avg, $max, $min, $sum, $count).
$match:
Syntax: { $match: { <query> } }
Example: { $match: { emp_dept: "IT", salary: { $gt: 52000 } } }
Purpose: Filters documents based on conditions (e.g., department and salary).
$project:
Syntax: { $project: { <field>: <1 or 0>, <new_field>: <expression>, _id: 0 } }
Example: { $project: { emp_name: 1, salary: 1, _id: 0 } }
Purpose: Selects or reshapes fields in the output.
$sort and $limit:
Syntax: { $sort: { <field>: <1 or -1> } }, { $limit: <number> }
Example: { $sort: { salary: -1 } }, { $limit: 2 }
Purpose: Orders documents (-1 for descending) and limits the number of results.
$unwind:
Syntax: { $unwind: "$array_field" }
Example: { $unwind: "$skills" }
Purpose: Deconstructs the skills array into separate documents for each element.
$addFields:
Syntax: { $addFields: { <new_field>: <expression> } }
Example: { $addFields: { bonus: { $multiply: ["$salary", 0.1] } } }
Purpose: Adds a computed field (e.g., bonus as 10% of salary).
$count:
Syntax: { $count: "<output_field>" }
Example: { $count: "total_employees" }
Purpose: Counts the number of documents.
$lookup:
Syntax: { $lookup: { from: "<collection>", localField: "<field>", foreignField: "<field>", as: "<output_array>" } }
Example: { $lookup: { from: "departments", localField: "emp_dept", foreignField: "dept_name", as: "dept_info" } }
Purpose: Performs a left join with another collection (e.g., departments).
Explanation of Logic
Database and Collection Setup: The use company command selects the company database. The insertMany operation creates the Employee collection with four sample documents, including skills (array) and keywords (string) fields to support multikey and text indexes.
Indexing:
Single-field: Optimizes queries on emp_id (e.g., exact matches).
Compound: Supports queries grouping by emp_dept and sorting by salary.
Multikey: Enables efficient queries on the skills array (e.g., db.Employee.find({ skills: "Java" })).
Text: Supports text search on keywords (e.g., finding "developer").
Hashed: Optimizes equality queries on emp_name.
Aggregation:
Group by Department: Computes average, max, min, and total salary, plus employee count per department.
Match: Filters IT employees with salaries above 52000, projecting relevant fields.
Sort and Limit: Returns the top 2 employees by salary.
Unwind and Group: Counts employees per skill by unwinding the skills array.
AddFields: Calculates a bonus field (10% of salary) for each employee.
Count: Counts total employees.
Lookup: Simulates a join with a departments collection to include department head information.
Efficiency: Indexes optimize query performance (e.g., emp_dept and salary for grouping, skills for array queries). Aggregation stages are structured to minimize data processing, and projections reduce output size.
Why This Solution Satisfies the Problem
Correct Syntax: The code uses standard MongoDB syntax for insertMany, createIndex, and aggregate, covering all specified indexing types and a comprehensive set of aggregation stages.
Comprehensive Indexing: Includes single-field, compound, multikey, text, and hashed indexes, covering all major MongoDB index types.
Comprehensive Aggregation: Demonstrates key aggregation stages ($group, $match, $project, $sort, $limit, $unwind, $addFields, $count, $lookup), expanding on the provided code’s $group example.
Theory Alignment: The solution leverages MongoDB’s aggregation framework for computed results (e.g., salary stats, skill counts) and indexing to improve query performance, as noted in the theory.
Enhanced Implementation: Adds skills and keywords fields to demonstrate multikey and text indexes, includes additional aggregation stages for broader coverage, and improves output clarity with projections.