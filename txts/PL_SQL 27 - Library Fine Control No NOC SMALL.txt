
PLSQL 27 - Fine Calculation Borrower.txt
========================================

Question:
---------
Write a PL/SQL block of code using the schema:

Tables:
-------
1. Borrower(Rollin, Name, DateofIssue, NameofBook, Status)
2. Fine(Roll_no, Date, Amt)

Requirements:
-------------
- Accept roll_no and name of book as input
- Calculate number of days since issue
- Fine rules:
    • 15–30 days: ₹5/day
    • >30 days: ₹50/day
- Update book Status to 'R' after return
- Insert into Fine table only if fine > 0
- Use control structures and exception-safe logic

SQL + Procedure Implementation:
-------------------------------

-- Step 1: Create and use database
CREATE DATABASE IF NOT EXISTS LibraryDB27;
USE LibraryDB27;

-- Step 2: Create tables

CREATE TABLE Borrower (
    Rollin INT,
    Name VARCHAR(50),
    DateOfIssue DATE,
    NameOfBook VARCHAR(100),
    Status CHAR(1),
    PRIMARY KEY (Rollin, NameOfBook)
);

CREATE TABLE Fine (
    Roll_no INT,
    Date DATE,
    Amt DECIMAL(10,2)
);

-- Step 3: Insert sample data

INSERT INTO Borrower VALUES
(101, 'Pranav Bhosale', '2024-04-01', 'Operating Systems', 'I'),
(102, 'Jay Rajankar', '2024-04-25', 'DBMS', 'I'),
(103, 'Anvay Kulkarni', '2024-05-10', 'Computer Networks', 'I'),
(104, 'Krishna Gandhi', '2024-03-10', 'Software Engineering', 'I'),
(105, 'Gaurav Kaushalye', '2024-05-01', 'Data Structures', 'I');

-- Step 4: Procedure

DELIMITER $$

CREATE PROCEDURE Return_Book(IN input_roll INT, IN input_book VARCHAR(100))
BEGIN
    DECLARE doi DATE;
    DECLARE days_held INT DEFAULT 0;
    DECLARE fine_amt DECIMAL(10,2) DEFAULT 0;
    DECLARE row_exists INT DEFAULT 0;

    -- Check if issued record exists
    SELECT COUNT(*) INTO row_exists
    FROM Borrower
    WHERE Rollin = input_roll AND NameOfBook = input_book AND Status = 'I';

    IF row_exists = 0 THEN
        SELECT 'No active issued record found for this user and book' AS Error;
    ELSE
        -- Get DateOfIssue
        SELECT DateOfIssue INTO doi
        FROM Borrower
        WHERE Rollin = input_roll AND NameOfBook = input_book;

        -- Compute days and fine
        SET days_held = DATEDIFF(CURDATE(), doi);

        IF days_held > 30 THEN
            SET fine_amt = days_held * 50;
        ELSEIF days_held >= 15 THEN
            SET fine_amt = days_held * 5;
        END IF;

        -- Update book status
        UPDATE Borrower
        SET Status = 'R'
        WHERE Rollin = input_roll AND NameOfBook = input_book;

        -- Insert fine if applicable
        IF fine_amt > 0 THEN
            INSERT INTO Fine VALUES (input_roll, CURDATE(), fine_amt);
        END IF;

        SELECT CONCAT('Return recorded. Fine: ₹', fine_amt) AS Result;
    END IF;
END$$

DELIMITER ;

-- Step 5: Example usage
CALL Return_Book(101, 'Operating Systems');

-- Step 6: View changes
SELECT * FROM Fine;
SELECT * FROM Borrower;




Below is the solution for the PL/SQL task based on the provided task from "PLSQL 27 - Fine Calculation Borrower.txt". It includes the creation of the database and tables, a stored procedure to calculate fines based on the number of days a book is held, updating the book status, inserting fine records when applicable, and querying the results. The solution uses proper PL/SQL syntax, provides a detailed explanation of the syntax used, and explains the logic behind each operation. The code is wrapped in an artifact tag as per the guidelines, with the content type set to text/sql for PL/SQL.

The task requires:

Creating a database LibraryDB27 and two tables:
Borrower with fields Rollin, Name, DateOfIssue, NameOfBook, Status.
Fine with fields Roll_no, Date, Amt.
Writing a PL/SQL procedure Return_Book that:
Accepts roll_no and NameofBook as input.
Calculates the number of days since the book’s issue date.
Applies fine rules: ₹5/day for 15–30 days, ₹50/day for >30 days.
Updates the book’s Status to 'R' (returned).
Inserts a record into the Fine table if the fine is >0.
Uses control structures and exception-safe logic.
Inserting sample data and executing the procedure.
Given the current date is May 21, 2025, the fine calculations will reflect the days elapsed since the sample data’s issue dates in 2024.

PLSQL Fine Calculation Borrower
sql
Show inline
Syntax Used
Database Creation and Selection:
Syntax: CREATE DATABASE IF NOT EXISTS <database_name>; USE <database_name>;
Example:
sql

CREATE DATABASE IF NOT EXISTS LibraryDB27;
USE LibraryDB27;
Purpose: Creates the LibraryDB27 database if it doesn’t exist and switches to it.
Table Creation:
Syntax: CREATE TABLE <table_name> ( <column1> <type> [constraints], <column2> <type>, ... );
Example:
sql

CREATE TABLE Borrower (
    Rollin INT,
    Name VARCHAR(50),
    DateOfIssue DATE,
    NameOfBook VARCHAR(100),
    Status CHAR(1),
    PRIMARY KEY (Rollin, NameOfBook)
);
CREATE TABLE Fine (
    Roll_no INT,
    Date DATE,
    Amt DECIMAL(10,2)
);
Purpose: Creates Borrower with a composite primary key (Rollin, NameOfBook) to ensure unique book borrowings per student, and Fine for storing fine details. DECIMAL(10,2) ensures two decimal places for Amt.
Insert Data:
Syntax: INSERT INTO <table_name> VALUES ( <value1>, <value2>, ... ), ...;
Example:
sql

INSERT INTO Borrower VALUES
(101, 'Pranav Bhosale', '2024-04-01', 'Operating Systems', 'I'),
...
Purpose: Populates Borrower with five records, each with an 'I' (issued) status and 2024 issue dates.
Stored Procedure:
Syntax:
sql

DELIMITER $$
CREATE PROCEDURE <procedure_name>(IN <param1> <type>, IN <param2> <type>)
BEGIN
    DECLARE <variable> <type> [DEFAULT <value>];
    SELECT COUNT(*) INTO <variable> FROM <table> WHERE <condition>;
    IF <condition> THEN
        <logic>;
    ELSE
        <logic>;
    END IF;
    ...
END$$
DELIMITER ;
Example:
sql

DELIMITER $$

CREATE PROCEDURE Return_Book(IN input_roll INT, IN input_book VARCHAR(100))
BEGIN
    DECLARE doi DATE;
    DECLARE days_held INT DEFAULT 0;
    DECLARE fine_amt DECIMAL(10,2) DEFAULT 0;
    DECLARE row_exists INT DEFAULT 0;

    SELECT COUNT(*) INTO row_exists
    FROM Borrower
    WHERE Rollin = input_roll AND NameOfBook = input_book AND Status = 'I';

    IF row_exists = 0 THEN
        SELECT 'No active issued record found for this user and book' AS Error;
    ELSE
        SELECT DateOfIssue INTO doi
        FROM Borrower
        WHERE Rollin = input_roll AND NameOfBook = input_book;

        SET days_held = DATEDIFF(CURDATE(), doi);

        IF days_held > 30 THEN
            SET fine_amt = days_held * 50;
        ELSEIF days_held >= 15 THEN
            SET fine_amt = days_held * 5;
        END IF;

        UPDATE Borrower
        SET Status = 'R'
        WHERE Rollin = input_roll AND NameOfBook = input_book;

        IF fine_amt > 0 THEN
            INSERT INTO Fine VALUES (input_roll, CURDATE(), fine_amt);
        END IF;

        SELECT CONCAT('Return recorded. Fine: ₹', fine_amt) AS Result;
    END IF;
END$$

DELIMITER ;
Components:
DELIMITER $$: Changes the statement delimiter to $$ for the procedure definition.
CREATE PROCEDURE: Defines the procedure with input parameters input_roll and input_book.
DECLARE: Defines variables for the issue date (doi), days held, fine amount, and existence check.
SELECT COUNT(*) INTO: Checks if the book is issued for the given roll number and book.
SELECT ... INTO: Retrieves the DateOfIssue for fine calculation.
DATEDIFF(CURDATE(), doi): Calculates days between the current date (May 21, 2025) and DateOfIssue.
IF ... ELSEIF: Applies fine rules (₹5/day for 15–30 days, ₹50/day for >30 days).
UPDATE: Sets Status to 'R' for the returned book.
INSERT INTO Fine: Adds a fine record if fine_amt > 0.
SELECT CONCAT: Outputs the result with the fine amount.
Purpose: Processes book returns, calculates fines, updates status, and records fines.
Execute Procedure:
Syntax: CALL <procedure_name>(<arg1>, <arg2>);
Example: CALL Return_Book(101, 'Operating Systems');
Purpose: Runs the procedure for a specific student and book.
View Results:
Syntax: SELECT * FROM <table_name>;
Example:
sql

SELECT * FROM Fine;
SELECT * FROM Borrower;
Purpose: Displays the Fine and Borrower tables to verify changes.
Explanation of Logic
Database and Table Setup: The LibraryDB27 database is created, with:
Borrower: Stores borrowing details with a composite primary key (Rollin, NameOfBook) to ensure unique borrowings.
Fine: Stores fine records with roll number, date, and amount.
Sample Data: Five borrowing records are inserted with 2024 issue dates and 'I' (issued) status.
Stored Procedure (Return_Book):
Takes input_roll and input_book as inputs.
Checks if an issued record exists (Status = 'I') using SELECT COUNT(*).
If no record exists, outputs an error message.
Retrieves DateOfIssue and calculates days held using DATEDIFF (e.g., for roll 101, from April 1, 2024, to May 21, 2025, is ~416 days).
Applies fine rules:
30 days: ₹50/day (e.g., 416 * 50 = ₹20,800 for roll 101).

15–30 days: ₹5/day.
<15 days: ₹0 (no fine).
Updates Status to 'R' in Borrower.
Inserts a fine record into Fine if fine_amt > 0.
Outputs the result with the fine amount.
Execution and Output: The procedure is called for roll 101 and "Operating Systems", updating the Borrower table and inserting a fine record. The SELECT statements display the updated tables.
Efficiency: The procedure uses efficient queries (COUNT, single-row SELECT) and a composite primary key for fast lookups. Exception-safe logic ensures no action is taken if the record doesn’t exist.
Why This Solution Satisfies the Problem
Correct Syntax: Uses standard SQL and PL/SQL syntax for database creation, table setup, data insertion, procedure definition, and execution.
Schema Adherence: The Borrower and Fine tables match the specified schema, with a composite primary key for Borrower and appropriate types for Fine.
Fine Logic: Accurately implements fine rules (₹5/day for 15–30 days, ₹50/day for >30 days) using DATEDIFF and conditional logic.
Control Structures and Exception Safety: Uses IF to handle non-existent records and only inserts fines when applicable, ensuring robust logic.
Theory Alignment: Leverages PL/SQL’s procedural capabilities for complex logic (fine calculation, status updates, conditional inserts), aligning with PL/SQL as Oracle’s procedural extension.
Complete Implementation: Includes all steps—database creation, table setup, data insertion, procedure execution, and result verification.
Enhanced Output: Retains the original logic, adding clear error handling and output formatting with CONCAT.